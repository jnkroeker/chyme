package main

import (
	"fmt"
	"github.com/hashicorp/vault/api"
	"os"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"

	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/go-redis/redis"

	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"

	"github.com/aws/aws-sdk-go/aws/credentials"
)

const (
	vaultAddr = "http://localhost:8200"
	vaultStaticToken = "s.FMtWzRspvkYIvNerpUVBwxg7" // this value will change each time a new vault -dev server is created
	vaultStsSecret = "aws/sts/assume_role_s3_sqs"
)

func main() {
	config := &api.Config{
		Address: vaultAddr,
	}

	client, err := api.NewClient(config)
	if err != nil {
		fmt.Println(err)
		return
	}
	client.SetToken(vaultStaticToken)
	c := client.Logical()
	options := map[string]interface{}{
		"ttl": "30m",
	}
	s, err := c.Write(vaultStsSecret, options)
	if err != nil {
		fmt.Println(err)
		return
	}

	// pull relevant information from assumed role to create AWS session

	key := s.Data["access_key"].(string)
	secret := s.Data["secret_key"].(string)
	token := s.Data["security_token"].(string)

	creds := credentials.NewStaticCredentials(key, secret, token)

	sess := session.Must(session.NewSession(&aws.Config{
		Credentials: creds,
		MaxRetries: aws.Int(3),
		Region: aws.String("us-east-1"),
	}))

	// create downloader for downloading from s3

	downloader := s3manager.NewDownloader(sess)
	filename := "output"

	// Create a file to write the S3 Object contents to.
	f, err := os.Create(filename)
	if err != nil {
		fmt.Println("unable to create file; ")
		fmt.Println(err)
		// return fmt.Errorf("failed to create file %q, %v", filename, err)
	}

	// Write the contents of S3 Object to the file
	n, err := downloader.Download(f, &s3.GetObjectInput{
		Bucket: aws.String("aws-golang-vault"),
		Key:    aws.String("Resume_v2.pdf"),
	})
	if err != nil {
		fmt.Println("unable to download file; ")
		fmt.Println(err)
		// return fmt.Errorf("failed to download file, %v", err)
	}
	fmt.Printf("file downloaded, %d bytes\n", n)
}